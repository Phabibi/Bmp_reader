#include<iostream>
#include<vector> 
#include<string>

using namespace std;



//bmp header;
class Header
{
  public: 
     //Hader
     uint16_t signature;
     uint32_t filesize;
     uint32_t reserved1;
     uint32_t offset;
     
     //info Header
//     uint32_t size;
//     int32_t width;
//     int32_t height;
//     uint16_t planes;
//     uint16_t bitsperpixel;
//     uint32_t compression;
//     uint32_t imgsize;
//     uint32_t hres;
//     uint32_t vres;
//     uint32_t color;
//     uint32_t icolor;
//
//     //Color table
//     uint8_t red;
//     uint8_t green;
//     uint8_t blue;
//     uint8_t alpha;


     //rest is the raw pixle data;
};

class Bmp_reader
{
  public:

    //the header data
    Header head;


    //the data
    uint8_t* data;


    //reader / parser
    void Reader(Header head , char* path);
};


void Bmp_reader::Reader(Header head , char* path)
{
   // start reading the header as a chunk
   //
    
   cout << "starting to read the file : " <<  path << endl; 
   cout << "size of header is " << sizeof(Header) << endl;

   int head_len = sizeof(Header);


   FILE* file = fopen(path, "r");

   size_t read_head = fread(&head ,1, 54 , file);

   


   if(read_head <= 0)
   {
      cout << "couldnt read properly" << endl;
      return;
   }
   
   /*Start reading the data*/ 
   
   // data in bytes width*height*bitsperpixle / 8       
   this->data = new uint8_t(head.width * head.height * head.bitsperpixel/ 8 );
   
   while((read_head = fread(this->data , 1, (head.width * head.height * head.bitsperpixel / 8),file)) > 0 )
   {
           cout << "reading " << read_head << endl;
           // reading data;
   
   }

   cout << "file size " << head.bitsperpixel << endl;
   cout << "height " << head.vres << endl;
   cout << "width" << head.hres << endl;

   fclose(file);

};

